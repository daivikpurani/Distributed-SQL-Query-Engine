🚀 Built a Distributed SQL Query Engine from scratch - here's what it does:

✅ **End-to-End Distributed Execution**
• Parallel query execution across 3 worker nodes using gRPC
• Coordinator distributes SQL to workers and aggregates results
• Real distributed queries, not just simulation

🔧 **Custom Query Planner** 
• Implemented shard-aware query planning from scratch
• Determines optimal worker selection based on data distribution
• Cost estimation for query optimization
• Built execution plan tree (SCAN → FILTER → JOIN → PROJECT)

🌐 **Interactive Dashboard**
• Users can write and execute SQL queries in real-time
• Live query execution visualization with step-by-step progress
• Real-time worker health monitoring
• Built with React + TypeScript + WebSocket

🏗️ **Architecture:**
• Coordinator-Worker pattern inspired by Google's distributed systems
• gRPC + Protocol Buffers for high-performance inter-service communication
• Full-stack: Java 17 + Spring Boot + React + TypeScript
• Fault tolerance with health monitoring

This demonstrates production-ready distributed systems engineering, database internals, and full-stack development.

🔗 GitHub: https://github.com/daivikpurani/Distributed-SQL-Query-Engine

#DistributedSystems #Java #FullStack #SystemsEngineering #Microservices

---
SHORTER VERSION (if you prefer):

🚀 Built a Distributed SQL Query Engine from scratch:

✅ Custom query planner with shard-aware optimization
✅ Parallel execution across multiple worker nodes  
✅ Interactive React dashboard for real-time query execution
✅ gRPC microservices architecture
✅ Full-stack: Java + Spring Boot + React + TypeScript

Implements coordinator-worker patterns from distributed systems research.

🔗 https://github.com/daivikpurani/Distributed-SQL-Query-Engine

#DistributedSystems #Java #SystemsEngineering

